------------------------------------------------------------------------------------
NAME: SCOTT CHU ID #: 1570524
NAME: Simon Chen ID #: 1574384
CMPUT 274 Fa19
Encrypted Communications Part 2.

Acknowledgements: Credits to the CMPUT274 TA team and Professor Zach Friggstad for providing 
part 1 solutions and some of the functions which was used as a template.
(You guys are the best :))
------------------------------------------------------------------------------------
Included Files:
 - encrypted_communications_part1.cpp
 - Makefile
 - README

Instructions:
 -Connect Arduino via. USB.

 -Open two separate terminals and run <"arduino-port-select">, on one terminal select port 0 and the other port 1.

 -In each terminal make and upload the .cpp file to the ardunios. run <make upload 0> and <make upload 1>.

 -Open the serial monitors of the arduinos on the terminals.
 run <serial-mon-0> and <serial-mon-1>.

 -Type into each serial monitor.



Wiring instruction:
 -Connect one arduino's TX3 port to the other arduinos RX3 port, do this for both arduinos.

 -Connect a wire between the ground of both arduinos.

 -For one arduino connect port 13 to the 5V port. (To be extra safe you can connect them via a resistors.)

 -For the other ardunio connect port 13 to a ground port.



Description:
A program that allows arduinos to send encrypted messages between each other then decrypting the messages. All done with the RSA encryption scheme, which uses modular arithmetic to encrypt and decrypt messages. Each arduino will be assigned as a server or client (based on port 13 signal), and will be assigned a key and modulus, which will be used in the encryption and decryption algorithm. The keys needed for the RSA encryption will also be generated by each arduino individually.	A finite state machine system is used to have each arduino send the keys to one another properly. 


